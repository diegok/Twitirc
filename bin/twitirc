#!/usr/bin/env perl

use strict;
use utf8;
use AnyEvent;
use AnyEvent::IRC::Util qw/ is_nick_prefix split_prefix prefix_nick /;
use AnyEvent::IRC::Client;
use AnyEvent::Twitter;
use AnyEvent::Twitter::Stream;
use FindBin qw($Bin);
use File::Slurp;
use JSON;
use Encode;
use Encode::Guess qw/ latin1 /;
use Data::Dumper;

my $config_file = "$Bin/../conf/twitirc.conf";
my $config      = decode_json(read_file($config_file));

our $command = {
    help   => \&command_help,
    twit   => \&command_tweet,
    tweet  => \&command_tweet,
    retweet  => \&command_retweet,
    reply  => \&command_reply,
    filter => \&command_filter,
    broadcast_rt => \&command_broadcast_rt,
    op     => {
        trust => \&command_trust,
        untrust => \&command_untrust,
        whotrust => \&command_whotrust,
    }
};

my $c = AnyEvent->condvar;
my $timer;

# Setup twitter client
my $twitter_client = AnyEvent::Twitter->new(
    consumer_key        => $config->{twitter}{consumer_key},
    consumer_secret     => $config->{twitter}{consumer_secret},
    access_token        => $config->{twitter}{access_token},
    access_token_secret => $config->{twitter}{access_token_secret},
);

# setup irc client
my $irc = new AnyEvent::IRC::Client;
$irc->reg_cb (
    connect => sub {
        my ($irc, $err) = @_;
        if (defined $err) { warn "connect error: $err\n"; return; }
        print "Connected to irc server\n";
    },
    registered => sub { 
        my $irc = shift;
        $irc->send_msg('join', $_) for @{$config->{channels}};
    },
    disconnect => sub { # I should re-connect
        print "Disconnected, waiting 30 secs to reconnect.";
        $timer = AnyEvent->timer (
            after => 30,
            cb => sub {
                undef $timer;
                print "Attempting to reconnect on IRC";
                $irc->connect( build_connect_data() );
            }
        );
    }, 
    publicmsg => sub {
        my ($irc, $channel, $msg) = @_;
        my $from = prefix_nick( $msg );

        my $decoder = Encode::Guess->guess($msg->{params}[1]);
        my $msg_text = ref($decoder) 
                     ? $decoder->decode($msg->{params}[1])
                     : decode('utf8', $msg->{params}[1]);

        my ($dest_nick, $text) = $msg_text =~ /^\s*(?:(\S+)\s*:\s*)?(.+?)\s*$/;
        if ( $text =~ /^!(\S+)(?:\s+(.+))?$/ && ( !$dest_nick || $irc->is_my_nick($dest_nick) ) ) {
            command_dispatch($irc, $channel, $from, $1 => $2 );
        }
        elsif ( $dest_nick && $irc->is_my_nick($dest_nick) ) {
            message_to_self( $irc, $channel, $from, $text );
        }
        elsif ( $dest_nick ) {
            message_to_other( $irc, $channel, $from, $dest_nick, $text );
        }
        else {
            message_to_channel( $irc, $channel, $from, $msg->{params}[1] );
        }
    },
    privatemsg => sub {
        my ($irc, $to, $msg) = @_;
        if ( is_nick_prefix( $msg->{prefix} ) ) {
            my $from = prefix_nick( $msg );
            private_message( $irc, $from, $msg->{params}[1] );
        }
    },
    join =>  sub {
        my ( $irc, $nick, $channel, $is_myself ) = @_;

        unless ( $is_myself ) {
            if ( exists $config->{trust}{$channel} && exists $config->{trust}{$channel}{$nick} ) {
                give_op( $irc => $channel => $nick );
            }
        } 
    },
    channel_nickmode_update => sub {
        my ( $irc, $channel, $dest ) = @_;
        if ( $irc->is_my_nick( $dest ) ) {
            my $modes = $irc->nick_modes($channel, $dest);
            if ( exists $modes->{o} && exists $config->{trust}{$channel} ) {
                give_op( $irc => $channel => $_ ) for keys %{$config->{$channel}{trust}};
            }
        }
    },
    nick_change => sub {
        my ( $irc, $old_nick, $new_nick, $is_myself ) = @_;
        unless ( $is_myself ) {
            for my $channel ( @{$config->{channels}} ) {
                if ( exists $config->{trust}{$channel} && exists $config->{trust}{$channel}{$new_nick} ) {
                    give_op( $irc => $channel => $new_nick );
                }
                elsif ( exists $config->{trust}{$channel} && not exists $config->{trust}{$channel}{$new_nick} ) {
                    my $modes = $irc->nick_modes($channel, $new_nick);
                    if ( exists $modes->{o} ) {
                        take_op( $irc => $channel => $new_nick );
                    }
                }
            }
        }
    },
);

$irc->connect( build_connect_data() );

# setup twitter stream filter
my $twitter_stream = build_twitter_stream();

sub build_twitter_stream {
    AnyEvent::Twitter::Stream->new(
        consumer_key    => $config->{twitter}{consumer_key},
        consumer_secret => $config->{twitter}{consumer_secret},
        token           => $config->{twitter}{access_token},
        token_secret    => $config->{twitter}{access_token_secret},
        method          => "filter",
        track           => $config->{twitter}{filter},
        on_tweet        => sub {
            my $tweet = shift;
            my $user = '@' . encode('utf8', $tweet->{user}{screen_name});
            if ( exists $tweet->{retweeted_status} && $config->{broadcast_rt} ) {
                my $url  = twit_url($tweet->{retweeted_status});
                my $rt_count = $tweet->{retweet_count};
                if ( $config->{broadcast_rt} eq 'step' ) {
                    if ( $rt_count == 5 || $rt_count % 10 == 0 ) {
                        my $txt  = $tweet->{retweeted_status}{text}; 
                        $txt =~ s/\n/ /gsm;
                        $txt  = encode('utf8', $txt);
                        $irc->send_srv('PRIVMSG', $config->{channels}[0], "RT[$rt_count] $user: $txt [ $url ]");
                    }
                }
                else {
                    $irc->send_srv('PRIVMSG', $config->{channels}[0], "RT[$rt_count] $url by $user");
                }
            }
            else {
                my $url  = twit_url($tweet);
                my $txt  = $tweet->{text}; $txt =~ s/\n/ /gsm;
                   $txt  = encode('utf8', $txt);
                $irc->send_srv('PRIVMSG', $config->{channels}[0], "$user: $txt [ $url ]");
            }
        },
        on_error        => sub { 
            print 'Twitter feed error: ', @_, "\n"; 
            print "Reinitializing feed\n"; 
            $twitter_stream = build_twitter_stream();
        },
    );
}

my $sigint = AnyEvent->signal(
    signal => "INT", 
    cb     => sub { 
        $irc->send_srv('PRIVMSG', $_, "I was killed by a unix signal, bye!") for @{$config->{channels}};
        $c->send;
    }
);

$c->recv;

sub private_message {}
sub message_to_self {
    my ( $irc, $channel, $from, $msg ) = @_;
    $irc->send_srv('PRIVMSG', $channel, "$from: ok");
}
sub message_to_channel {}
sub message_to_other {}

sub command_dispatch {
    my ($irc, $channel, $from, $cmd, $arg ) = @_;
    my $modes = $irc->nick_modes($channel, $from);

    if ( $modes->{o} || $modes->{v} ) { # only op's or voice's can givme orders
        if ( $modes->{o} && exists $command->{op}{ $cmd } ) {
            $command->{op}{ $cmd }->($irc, $channel, $from, $arg);
        }
        elsif ( exists $command->{ $cmd } ) {
            $command->{ $cmd }->($irc, $channel, $from, $arg);
        }
        else {
            $irc->send_srv('PRIVMSG', $channel, "$from: hm... no entiendo que quieres que haga.");
        }
    }
    else {
        $irc->send_srv('PRIVMSG', $channel, "$from: no me fio de ti, lo siento.");
    }
}

sub command_help {
    my ($irc, $channel, $from, $arg) = @_;
    $arg ||= 'help';

    if ( $arg =~ /^\s*!?(?:twit|tweet)\s*$/) {
        $irc->send_srv('PRIVMSG', $channel, "$from: !tweet el mensaje que quieras enviar a twitter");
    }
    elsif ( $arg =~ /^\s*!?retweet\s*$/) {
        $irc->send_srv('PRIVMSG', $channel, "$from: !retweet tweetID");
    }
    elsif ( $arg =~ /^\s*!?reply\s*$/) {
        $irc->send_srv('PRIVMSG', $channel, "$from: !reply tweetID el mensaje con el que respondes");
    }
    elsif ( $arg =~ /^\s*!?filter\s*$/) {
        $irc->send_srv('PRIVMSG', $channel, "$from: !filter [[add|del] palabra|view] <-- Para modificar el filtro de bÃºsqueda");
    }
    elsif ( $arg =~ /^\s*!?broadcast_rt\s*$/) {
        $irc->send_srv('PRIVMSG', $channel, "$from: !broadcast_rt [on|step|off|status] <-- Mostrar o no mostrar los RT's");
    }
    elsif ( $arg =~ /^\s*!?(?:un)?trust\s*$/) {
        $irc->send_srv('PRIVMSG', $channel, "$from: ![trust|untrust] nickname <-- Darle o quitarle op a alguien");
    }
    elsif ( $arg =~ /^\s*!?whotrust\s*$/) {
        $irc->send_srv('PRIVMSG', $channel, "$from: !whotrust [nickname] <-- En quien confia el bot?, quien se lo ha dicho?");
    }
    else {
        $irc->send_srv('PRIVMSG', $channel, "$from: !help [tweet|retweet|reply|filter|broadcast_rt|trust|untrust|whotrust|help]");
    }
}

sub command_tweet {
    my ($irc, $channel, $from, $arg) = @_;
    if ( ! length $arg ) {
        $irc->send_srv('PRIVMSG', $channel, "$from: no puedo enviar un mensaje vacio.");
    }
    elsif ( length $arg <= 140 ) {
        $irc->send_srv('PRIVMSG', $channel, "$from: ok, lo envio ;-)");
        $twitter_client->post('statuses/update', {status => $arg}, sub {
            my ($hdr, $resp, $err) = @_;
            if ( $resp ) {
                my $url = twit_url($resp);
                $irc->send_srv('PRIVMSG', $channel, "$from: $url");
            }
            else {
                $irc->send_srv('PRIVMSG', $channel, "$from: no lo he podido enviar -> $err");
            }
        });
    }
    else {
        $irc->send_srv('PRIVMSG', $channel, "$from: el mensaje es mas largo que 140 caracteres, no lo puedo enviar.");
    }
}

sub command_reply {
    my ($irc, $channel, $from, $arg) = @_;
    my ($id, $msg) = $arg =~ /^(\d+)\s+\.+$/;
    if ( !$id || !$msg ) {
        $irc->send_srv('PRIVMSG', $channel, "$from: tienes que darme un id seguido por la respuesta a ese update. Mira la ayuda ;-)");
    }
    elsif ( length $msg <= 140 ) {
        $irc->send_srv('PRIVMSG', $channel, "$from: ok, respondo ;-)");
        $twitter_client->post('statuses/update', {status => $msg, in_reply_to_status_id => $id}, sub {
            my ($hdr, $resp, $err) = @_;
            if ( $resp ) {
                my $url = twit_url($resp);
                $irc->send_srv('PRIVMSG', $channel, "$from: $url");
            }
            else {
                $irc->send_srv('PRIVMSG', $channel, "$from: no lo he podido enviar -> $err");
            }
        });
    }
    else {
        $irc->send_srv('PRIVMSG', $channel, "$from: el mensaje es mas largo que 140 caracteres, no lo puedo enviar.");
    }
}

sub command_retweet {
    my ($irc, $channel, $from, $arg) = @_;
    if ( ! length $arg || $arg !~ /^\d+$/ ) {
        $irc->send_srv('PRIVMSG', $channel, "$from: necesito un ID para hacer retweet (el nro del final de la url del tweet)");
    }
    else {
        $irc->send_srv('PRIVMSG', $channel, "$from: ok, le hago retweet ;-)");
        $twitter_client->post('statuses/retweet/' . $arg, {}, sub {
            my ($hdr, $resp, $err) = @_;
            if ( $resp ) {
                my $url = twit_url($resp);
                $irc->send_srv('PRIVMSG', $channel, "$from: $url");
            }
            else {
                $irc->send_srv('PRIVMSG', $channel, "$from: no he podido hacer el retweet -> $err");
            }
        });
    }
}

sub command_filter {
    my ($irc, $channel, $from, $arg) = @_;
    my ( $cmd, $arg ) = split( /\s+/, $arg );
    my $update_config = 0;

    if ( $cmd eq 'add' ) {
        $config->{twitter}{filter} = join ',', ( split(/\s*,\s*/,$config->{twitter}{filter}), $arg );
        $update_config++;
    }
    elsif ( $cmd eq 'del' ) {
        $config->{twitter}{filter} = join ',', 
                                     grep { $_ ne $arg } 
                                     split(/\s*,\s*/,$config->{twitter}{filter});
        $update_config++;
    }
    elsif ( $cmd eq 'view' ) {
        my $words = $config->{twitter}{filter};
        $irc->send_srv('PRIVMSG', $channel, "$from: $words");
    }
    else {
        $irc->send_srv('PRIVMSG', $channel, "$from: !filter [add|del|view] [word]");
    }

    if ( $update_config ) {
        $irc->send_srv('PRIVMSG', $channel, "$from: ok!, he modificado el filtro ;-)");
        $twitter_stream = build_twitter_stream();
        save_config();
    }
}

sub command_broadcast_rt {
    my ($irc, $channel, $from, $arg) = @_;

    if ( $arg =~ /^on$/i ) {
        $config->{broadcast_rt} = 1;
        save_config();
    }
    elsif ( $arg =~ /^step$/i ) {
        $config->{broadcast_rt} = 'step';
        save_config();
    }
    elsif ( $arg =~ /^off$/i ) {
        $config->{broadcast_rt} = 0;
        save_config();
    }

    if ($config->{broadcast_rt}) {
        $irc->send_srv('PRIVMSG', $channel, "$from: retweet broadcast is active" );
    }
    else {
        $irc->send_srv('PRIVMSG', $channel, "$from: retweets are hidden from channel" );
    }
}

sub command_trust {
    my ($irc, $channel, $from, $arg) = @_;

    unless ( $arg ) {
        $irc->send_srv('PRIVMSG', $channel, "$from: I always trust nobody ;)" );
        return;
    }

    if ( my $modes = $irc->nick_modes($channel, $arg ) ) {
        $irc->send_srv('PRIVMSG', $channel, "$from: Ok, I trust if you trust ;)" );
        $config->{trust}{$channel}{$arg} = $from;
        save_config();
        give_op($irc, $channel, $arg);
    }
}

sub command_untrust {
    my ($irc, $channel, $from, $arg) = @_;

    unless ( $arg ) {
        $irc->send_srv('PRIVMSG', $channel, "$from: I always trust nobody ;)" );
        return;
    }

    if ( exists $config->{trust}{$channel}{$arg} ) {
        my $who = delete $config->{trust}{$channel}{$arg};
        $irc->send_srv('PRIVMSG', $channel, "$from: Ok, I won't trust $arg anymore!" );
        save_config();
    }
    else {
        $irc->send_srv('PRIVMSG', $channel, "$from: I don't trust $arg" );
    }

    if ( my $modes = $irc->nick_modes($channel, $arg ) ) {
        take_op($irc, $channel, $arg);
    }
}

sub command_whotrust {
    my ($irc, $channel, $from, $arg) = @_;
    
    if ( $arg ) {
        if ( exists $config->{trust}{$channel}{$arg} ) {
            my $who = $config->{trust}{$channel}{$arg};
            $irc->send_srv('PRIVMSG', $channel, "$from: $who told me to trust $arg" );
        }
        else {
            $irc->send_srv('PRIVMSG', $channel, "$from: I don't trust $arg" );
        }
    }
    else {
        my $trust_list = 'I trust in ' .  join(', ', keys %{$config->{trust}{$channel}});
        $trust_list =~ s/, ([^,]+)$/ and $1/;
        $irc->send_srv('PRIVMSG', $channel, "$from: $trust_list" );
    }
}

sub give_op {
    my ($irc, $channel, $nick) = @_;
    $irc->send_msg( 'MODE', $channel, '+o', $nick);
}
sub take_op {
    my ($irc, $channel, $nick) = @_;
    $irc->send_msg( 'MODE', $channel, '-o', $nick);
}

sub twit_url {
    my $msg = shift;

    my ( $sname, $id ) = ( $msg->{user}{screen_name}, $msg->{id} );

    if ( $sname && $id ) {
        return "http://twitter.com/$sname/status/$id";
    }

    return '';
}

sub save_config {
    write_file( $config_file, JSON->new->indent(1)->utf8(1)->encode($config) );
}

# build AE::IRC::Client connect params from global $config
sub build_connect_data {
    return (
        $config->{host}, 
        $config->{port} || 6667, 
        { 
            nick => $config->{nickname} || 'hacktibot', 
            user => $config->{user} || 'hacktibot',
            real => $config->{real} || 'hacktivistas.net',
        }
    );
}

